<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: nested.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-1999
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR20
 */

#define ANTLR_VERSION	13320
#include "tokens.h"
#include "AToken.h"

>>

<<%%parserclass P>>

<<%%lexprefix


#include    "NestedTokenStream.h"

char *mystrdup(const char *);

  
>>

<<%%lexmember

NestedTokenStream           *nestedTokenStream;
const char *                filename;
virtual _ANTLRTokenPtr      getToken();
>>


%%START

@
	<<
		return Eof;
	>>

[\t \ ]+
	<<
		skip();  
		return WS;
	>>

\n
	<<
		skip();newline();set_endcol(0);  
		return NL;
	>>

#include
	<<
		mode(LC_INCLUDE); 
		//
		// skip() depends on the way your parser works
		// does it want to see the Include token or not ?
		//
		skip();
		return Include;
	>>

~[\ \t \n #]+
	<<
		return Any;
	>>


%%LC_INCLUDE

@
	<<
		return Eof;
	>>

[\t \ ]+
	<<
		skip();  
		return WS;
	>>

\n
	<<
		skip();newline();set_endcol(0);  
		return NL;
	>>

( [A-Z a-z 0-9 \. _]+ ) | ( \" ~[\ \n \t \r \"]* \" )
	<<
		
		mode(START);
		char *p=_lextext;
		if (*p=='\"') p++;
		for (char *q=p; *q != '\0'; q++) if (*q=='\"') *q='\0';
		const char *    nestedFilename=mystrdup(p);
		FILE *          nestedFILE=fopen(nestedFilename,"r");
		if (nestedFILE == 0) {
			fprintf(stderr,"Can't open #include file \"%s\"\n",nestedFilename);
		} else {
			DLGFileInput  *dlgFileInput=new DLGFileInput(nestedFILE);
			DLGLexer      *dlgLexer=new DLGLexer(dlgFileInput,2000);
			dlgLexer->nestedTokenStream=nestedTokenStream;
			dlgLexer->setToken(token_to_fill);
			dlgLexer->filename=nestedFilename;
			nestedTokenStream->newTokenStream(dlgLexer);
		};
		//
		//  There is a coordination problem with NestedTokenStream.
		//  When NestedTokenStream::getToken() calls the DLGLexer::getToken()
		//    the lexer will not return until it has a token (possibly an EOF token).
		//  If the action routine for Filename calls skip() then the returned token
		//    will be the one following the Filename.  This is not good, since that
		//    token would be passed to the parser before text from the included file.
		//  In this case the token should be saved until the nested file has been
		//    completely read.
		//  If the user doesn't call skip then the token should *not* be held until
		//    the nested file has been read, but there is no way for NestedTokenStream
		//    the right thing to do unless the Filename action routine tells it.
		//
		//  This tells the NestedTokenStream to skip this token, rather than doing the
		//    skip in the DLGLexer.  It solves the problem without requiring the
		//    NestedTokenStream to stash the lookahead token until needed.
		//
		//  This is *only* needed following a call to NestedTokenStream::newTokenStream()
		//    when you want to skip the Filename token.
		//
		nestedTokenStream->skip();
		return Filename;
	>>

%%
